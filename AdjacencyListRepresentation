#include<bits/stdc++.h>
using namepace std;

const int N = 1en+10;
vector<int> G[N];
// vector<pair<int, int>> G[N];  --> In case of weighted graph.
int main()
{   
    int n,m;
    cin>>n>>m;

    for(int i=0;i<m;i++)
    {
        int v1,v2;
        cin>>v1>>v2;
        G[v1].push_back(v2);
        G[v2].push_back(v1);
        
         //G[v1].push_back({v2, wt});   --> In case of weighted graph.
         //G[v1].push_back({v1, wt});   --> In case of weighted graph.
    }
    return 0;
}
//SPACE COMPLEXITY
// O(V+E) 
// N = 10^5
// SPACE = 10^5 
// DISADVANTAGE
// Weight nd connection access/finding takes O(N) time.

// i, j Connected?
// for(int child: Graph[i])
//     if(child==j)
//        {
//          cout<<"connected";
//       }


//i, j --> weight?
// for(pair<int, int> child: Graph[i])
//     if(child==j)
//        {
//         //"connected";
//          cout<<child.second;
//       }
 //  O(N)
